openapi: 3.0.3
info:
  title: Scaffold Your Shape API
  description: Comprehensive fitness tracking and community API for managing activities, clubs, challenges, and user interactions.
  version: 1.0.0
  contact:
    email: support@scaffoldyourshape.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api
    description: Development server
  - url: https://your-domain.com/api
    description: Production server

security:
  - sessionAuth: []

paths:
  /auth/session:
    get:
      summary: Get current user session
      tags:
        - Authentication
      responses:
        '200':
          description: Current session information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /activities:
    get:
      summary: Get all activities for authenticated user
      tags:
        - Activities
      security:
        - sessionAuth: []
      responses:
        '200':
          description: List of activities
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Create a new activity
      tags:
        - Activities
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateActivityRequest'
      responses:
        '201':
          description: Activity created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /activities/with-details:
    get:
      summary: Get activities with detailed information (maps, segmentations)
      tags:
        - Activities
      security:
        - sessionAuth: []
      responses:
        '200':
          description: List of activities with details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ActivityWithDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /clubs:
    get:
      summary: Get all clubs
      tags:
        - Clubs
      security:
        - sessionAuth: []
      responses:
        '200':
          description: List of clubs
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Club'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Create a new club
      tags:
        - Clubs
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClubRequest'
      responses:
        '201':
          description: Club created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Club'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /clubs/{clubId}:
    get:
      summary: Get club by ID
      tags:
        - Clubs
      security:
        - sessionAuth: []
      parameters:
        - name: clubId
          in: path
          required: true
          schema:
            type: string
          description: Club ID
      responses:
        '200':
          description: Club details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Club'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      summary: Update club
      tags:
        - Clubs
      security:
        - sessionAuth: []
      parameters:
        - name: clubId
          in: path
          required: true
          schema:
            type: string
          description: Club ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClubRequest'
      responses:
        '200':
          description: Club updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Club'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete club
      tags:
        - Clubs
      security:
        - sessionAuth: []
      parameters:
        - name: clubId
          in: path
          required: true
          schema:
            type: string
          description: Club ID
      responses:
        '204':
          description: Club deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /challenges:
    get:
      summary: Get all challenges
      tags:
        - Challenges
      security:
        - sessionAuth: []
      responses:
        '200':
          description: List of challenges
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Challenge'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Create a new challenge
      tags:
        - Challenges
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChallengeRequest'
      responses:
        '201':
          description: Challenge created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Challenge'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /chat/send-message:
    post:
      summary: Send message to AI assistant
      tags:
        - Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
      responses:
        '200':
          description: AI response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: next-auth.session-token
      description: Session-based authentication using NextAuth.js

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: User ID
        email:
          type: string
          format: email
          description: User email
        name:
          type: string
          description: User display name
        profile:
          $ref: '#/components/schemas/Profile'

    Profile:
      type: object
      properties:
        id:
          type: string
          description: Profile ID
        name:
          type: string
          description: Profile name
        bio:
          type: string
          description: User bio
        avatar_url:
          type: string
          format: uri
          description: Avatar image URL

    Activity:
      type: object
      properties:
        id:
          type: string
          description: Activity ID
        user_id:
          type: string
          description: User ID who created the activity
        type:
          type: string
          enum: [running, cycling, swimming, walking, yoga, strength_training, other]
          description: Type of activity
        distance:
          type: number
          minimum: 0
          description: Distance in kilometers
        duration:
          type: integer
          minimum: 0
          description: Duration in seconds
        date:
          type: string
          format: date-time
          description: Activity date and time
        location:
          type: string
          description: Activity location
        notes:
          type: string
          maxLength: 500
          description: Activity notes
        created_at:
          type: string
          format: date-time
          description: Record creation timestamp

    ActivityWithDetails:
      allOf:
        - $ref: '#/components/schemas/Activity'
        - type: object
          properties:
            maps:
              type: array
              items:
                $ref: '#/components/schemas/ActivityMap'
            segmentations:
              type: array
              items:
                $ref: '#/components/schemas/ActivitySegmentation'

    ActivityMap:
      type: object
      properties:
        id:
          type: string
          description: Map ID
        image_url:
          type: string
          format: uri
          description: Map image URL
        polyline:
          type: string
          description: Encoded polyline data

    ActivitySegmentation:
      type: object
      properties:
        id:
          type: string
          description: Segmentation ID
        start_time:
          type: integer
          minimum: 0
          description: Segment start time in seconds
        end_time:
          type: integer
          minimum: 0
          description: Segment end time in seconds
        distance:
          type: number
          minimum: 0
          description: Segment distance in kilometers
        pace:
          type: string
          description: Segment pace (e.g., "6:00")

    Club:
      type: object
      properties:
        id:
          type: string
          description: Club ID
        name:
          type: string
          maxLength: 100
          description: Club name
        description:
          type: string
          maxLength: 500
          description: Club description
        is_private:
          type: boolean
          description: Whether the club is private
        background_image_url:
          type: string
          format: uri
          description: Background image URL
        creator_id:
          type: string
          description: Club creator user ID
        created_at:
          type: string
          format: date-time
          description: Club creation timestamp
        member_count:
          type: integer
          minimum: 0
          description: Number of club members

    Challenge:
      type: object
      properties:
        id:
          type: string
          description: Challenge ID
        title:
          type: string
          maxLength: 100
          description: Challenge title
        description:
          type: string
          maxLength: 500
          description: Challenge description
        creator_id:
          type: string
          description: Challenge creator user ID
        target_value:
          type: number
          minimum: 0
          description: Target value to achieve
        unit:
          type: string
          description: Unit of measurement (e.g., "km", "minutes")
        start_date:
          type: string
          format: date-time
          description: Challenge start date
        end_date:
          type: string
          format: date-time
          description: Challenge end date
        is_public:
          type: boolean
          description: Whether the challenge is public
        participant_count:
          type: integer
          minimum: 0
          description: Number of challenge participants
        created_at:
          type: string
          format: date-time
          description: Challenge creation timestamp

    CreateActivityRequest:
      type: object
      required:
        - type
        - date
      properties:
        type:
          type: string
          enum: [running, cycling, swimming, walking, yoga, strength_training, other]
          description: Type of activity
        distance:
          type: number
          minimum: 0
          description: Distance in kilometers
        duration:
          type: integer
          minimum: 0
          description: Duration in seconds
        date:
          type: string
          format: date-time
          description: Activity date and time
        location:
          type: string
          description: Activity location
        notes:
          type: string
          maxLength: 500
          description: Activity notes

    CreateClubRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          maxLength: 100
          description: Club name
        description:
          type: string
          maxLength: 500
          description: Club description
        is_private:
          type: boolean
          default: false
          description: Whether the club is private
        background_image_url:
          type: string
          format: uri
          description: Background image URL

    UpdateClubRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: Club name
        description:
          type: string
          maxLength: 500
          description: Club description
        is_private:
          type: boolean
          description: Whether the club is private

    CreateChallengeRequest:
      type: object
      required:
        - title
        - description
        - target_value
        - unit
        - start_date
        - end_date
      properties:
        title:
          type: string
          maxLength: 100
          description: Challenge title
        description:
          type: string
          maxLength: 500
          description: Challenge description
        target_value:
          type: number
          minimum: 0
          description: Target value to achieve
        unit:
          type: string
          description: Unit of measurement (e.g., "km", "minutes")
        start_date:
          type: string
          format: date-time
          description: Challenge start date
        end_date:
          type: string
          format: date-time
          description: Challenge end date
        is_public:
          type: boolean
          default: true
          description: Whether the challenge is public

    ChatMessageRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          maxLength: 1000
          description: User message to AI assistant
        userId:
          type: string
          description: Optional user ID for context

    ChatMessageResponse:
      type: object
      properties:
        reply:
          type: string
          description: AI assistant response
        timestamp:
          type: string
          format: date-time
          description: Response timestamp
        status:
          type: string
          enum: [success]
          description: Response status

    SessionResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details

  responses:
    UnauthorizedError:
      description: User not authenticated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "User not authenticated"
            code: "UNAUTHORIZED"

    ValidationError:
      description: Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Invalid input data"
            code: "VALIDATION_ERROR"
            details:
              field: "name"
              message: "Name is required"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Resource not found"
            code: "NOT_FOUND"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Internal server error"
            code: "INTERNAL_ERROR"

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Activities
    description: Fitness activity tracking and management
  - name: Clubs
    description: Community club creation and management
  - name: Challenges
    description: Fitness challenge creation and participation
  - name: Chat
    description: AI assistant chat functionality 